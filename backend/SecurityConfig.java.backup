package com.bliss.tradingdashboard.config;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import java.util.List;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final Environment environment;

    @Value("#{'${trading.cors.allowed-origins:http://localhost:3000}'.split(',')}")
    private List<String> allowedOrigins;

    @Value("#{'${trading.cors.allowed-methods:GET,POST,PUT,DELETE,OPTIONS}'.split(',')}")
    private List<String> allowedMethods;

    @Value("${trading.cors.max-age:3600}")
    private Long maxAge;

    @Value("${trading.security.api-rate-limit:100}")
    private int apiRateLimit;

    @Value("${trading.security.enable-h2-console:true}")
    private boolean enableH2Console;

    public SecurityConfig(Environment environment) {
        this.environment = environment;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        HttpSecurity httpSecurity = http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/public/**").permitAll()
                .requestMatchers("/api/watchlist/**").permitAll()
                .requestMatchers("/api/stocks/**").permitAll()
                .requestMatchers("/api/portfolio/**").permitAll()
                .requestMatchers("/api/analyst/**").permitAll()
                .requestMatchers("/api/sectors/**").permitAll()
                .requestMatchers("/api/health").permitAll()
                .requestMatchers("/actuator/health").permitAll()
                .anyRequest().permitAll()
            );

        if (enableH2Console) {
            httpSecurity.headers(headers -> headers
                .frameOptions(frameOptions -> frameOptions.sameOrigin())
            );
        }

        return httpSecurity.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        
        if (Arrays.asList(environment.getActiveProfiles()).contains("dev")) {
            configuration.setAllowedOriginPatterns(Arrays.asList("*"));
        } else {
            configuration.setAllowedOrigins(allowedOrigins);
        }
        
        configuration.setAllowedMethods(allowedMethods);
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(!Arrays.asList(environment.getActiveProfiles()).contains("prod"));
        configuration.setMaxAge(maxAge);

        // Add headers for enhanced API security
        configuration.setExposedHeaders(Arrays.asList(
            "X-Rate-Limit-Remaining",
            "X-Rate-Limit-Reset",
            "X-Data-Source",
            "X-Market-Status"
        ));

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}